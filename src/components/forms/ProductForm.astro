---
import type { BakeryItem, Category } from '@/interfaces/BakeryItem';
import { actions } from "astro:actions";

interface Props {
  categories: Category[];
  product?: BakeryItem; // La clave para el modo de edición
}

const { categories, product } = Astro.props;
const isEditMode = !!product; // Determina si está en modo edición
const formAction = isEditMode ? actions.updateBakeryItem : actions.addBakeryItem;

// Establece los valores iniciales del formulario
const initialValues = product || {
  id: '',
  name: '',
  description: '',
  price: '',
  imageUrl: '',
  categoryId: '',
  isActive: true,
  stock: 0,
};
---
<form class="product-form" method="post" action={formAction}>
  {isEditMode && (
    <input type="hidden" id="product-id" name="id" value={initialValues.id} />
  )}
  
  <div class="form__group">
    <label class="form__label" for="product-name">Name</label>
    <input 
      class="form__input form__input--name" 
      id="product-name" 
      name="name" 
      value={initialValues.name} 
      required 
    />
  </div>

  <div class="form__group">
    <label class="form__label" for="product-description">Description</label>
    <textarea class="form__input" id="product-description" name="description">{initialValues.description}</textarea>
  </div>

  <div class="form__group">
    <label class="form__label" for="product-price">Price</label>
    <input 
      class="form__input" 
      id="product-price" 
      name="price" 
      type="number" 
      step="0.01" 
      value={initialValues.price} 
    />
  </div>

  <div class="form__group">
    <label class="form__label" for="product-imageUrl">Image Url</label>
    <input 
      class="form__input" 
      id="product-imageUrl" 
      name="imageUrl" 
      type="url" 
      value={initialValues.imageUrl ?? ''} 
    />
  </div>

  <div class="form__group">
    <label class="form__label" for="product-categoryId">Category</label>
    <select class="form__input" id="product-categoryId" name="categoryId" required>
      <option value="">Select...</option>
      {categories.map(c => (
        <option 
          value={c.id} 
          selected={c.id === initialValues.categoryId}>
          {c.name}
        </option>
      ))}
    </select>
  </div>
  <div class="form__group">
  <div class="form__group--inline">
    <div class="form__left">
      <label for="stock">Stock</label>
      <input 
        type="number" 
        class="stock" 
        id="stock" 
        name="stock" 
        value={initialValues.stock} 
        required 
      />
    </div>

    <div class="form__right">
      <label class="form__label form__label--inline">
        <input 
          class="form__input form__input--checkbox" 
          type="checkbox" 
          name="isActive" 
          checked={initialValues.isActive} 
        />
        Activate
      </label>
    </div>
  </div>
</div>

  <button class="btn btn--primary" type="submit">
    {isEditMode ? "Update" : "Create"}
  </button>
</form>


<style>
  
.product-form {
  
}
.form__group {
  margin-bottom: 0.5rem;
}
.form__group--inline {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 0.5rem 0.5rem;
}

.form__left,
.form__right {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.form__label {
  display: block;
  margin-bottom: 2px;
  font-weight: 500;
  color: #333;
}

.form__label--inline {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.form__input {
  width: 100%;
  padding: 5px 7px;
  border: 1px solid #ccc;
  border-radius: 5px;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 1rem;
  transition: all 0.2s ease-in-out;
}

.form__input:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

.form__input--name {
  font-size: 1.25rem;
  font-weight: 600;
  border-color: #aaa;
}

.form__input--checkbox {
  width: auto;
}
.stock {
  width: 5rem;
  margin-top: 0.5rem;
}
.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: background-color 0.2s ease-in-out;
}

.btn--primary {
  color: #fff;
  background-image: linear-gradient(135deg, #f7931e 0%, #f46214 100%);
  box-shadow: 0 6px 15px rgba(244, 98, 20, 0.4);
}

.btn--primary:hover {
  box-shadow: 0 8px 20px rgba(244, 98, 20, 0.5);
  background-image: linear-gradient(135deg, #f46214 0%, #f7931e 100%);
}
</style>

