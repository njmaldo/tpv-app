---
import { actions } from "astro:actions";
import SearchInput from "../SearchInput.astro";
import type { Employee } from "@/interfaces/Employee";
import ProductModal from "../ui/ProductModal.astro";
import EmployeesForm from "../forms/EmployeesForm.astro";

// Listar todos los usuarios 
const result  = await Astro.callAction(actions.listEmployees, undefined );
const employees: Employee[] = (result.data || []) as Employee[];
// Modal form Edit, create
const url = Astro.url;
const editEmplyeetId = url.searchParams.get("edit");
const createMode = url.searchParams.has("create");

let editingEmployee = null;
if (editEmplyeetId) {
  editingEmployee = employees.find((p) => p.id === editEmplyeetId);
}
const showModal = !!editingEmployee || createMode;
---

<section class="dashboard">
  <header class="dashboard-header">
    <h2>Empleados</h2>
    <SearchInput id="employee-search" placeholder="Search for an employee..." data-target=".table-employee" />
    <div class="actions">
      <a href={`${Astro.url.pathname}?create=1`} class="btn btn-primary">➕ Add employee</a>
    </div>
  </header>
  <div class="table-responsive">
    <table class="table table-employee">
      <thead>
        <tr>
          <th>Name</th>
          <th>Email</th>
          <th>Shift</th>
          <th>Role</th>
          <th>Age</th>
          <th>Active</th>
          <th>Date of Registration</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        {employees.map(({id,userId,name,lastName,email,roleId,shift,age,createdAt,isActive}) => (
          <tr>
            <td>{name} {lastName}</td>
            <td>{email}</td>
            <td>{shift ?? "—"}</td>
            <td>{roleId}</td>
            <td>{age ?? "—"}</td>
            <td class={isActive ? "status-active" : "status-inactive"}>
                  {isActive ? "✅" : "❌"}
            </td>
            <td>{new Date(createdAt).toLocaleDateString()}</td>
            <td>
              <div class="dropdown">
                  <button class="btn-icon" type="button" aria-haspopup="true">⋮</button>
                  <div class="dropdown-menu hidden" role="menu">
                  <!-- Edit -->
                 <a href={`${Astro.url.pathname}?edit=${id}`} class="dropdown-item">
                    Edit
                  </a>
  
                  <!-- Toggle Active -->
                  <form class="form-toggle" action={actions.toggleEmployeeActive} method="post" data-astro-reload>
                    <input type="hidden" name="id" value={userId} />
                    <input type="hidden" name="isActive" value={isActive ? "0" : "1"} />
                    <button type="submit" class="dropdown-item">
                      {isActive ? "Deactivate" : "Activate"}
                    </button>
                  </form>
                  <!-- Delete -->
                  <form action={actions.deleteEmployee} method="post" onsubmit="return confirm('¿Delete this employee?')" >
                      <input type="hidden" name="id" value={userId} />
                      <button type="submit" class="btn dropdown-item danger">
                      Delete
                      </button>
                  </form>
                  </div>
              </div>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</section>
{showModal && (
  <ProductModal
    id="employeeModal"
    title={editingEmployee ? "Editar empleado" : "Nuevo empleado"}
  >
    <EmployeesForm employee={editingEmployee} />
  </ProductModal>
)}

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    // --- Manejo del menú desplegable ---
    document.addEventListener("click", (e) => {
    
    document.querySelectorAll(".dropdown-menu").forEach(menu => {
      if (!menu.contains(e.target) && !menu.previousElementSibling.contains(e.target)) {
        menu.style.display = "none";
      }
    });

    // Abre/cierra el dropdown actual
    if (e.target.classList.contains("btn-icon")) {
      const menu = e.target.nextElementSibling;
      menu.style.display = menu.style.display === "block" ? "none" : "block";
    }
  });
    
    // Modal edit + crear
     const modal = document.getElementById("employeeModal");
  if (modal) {
    window.addEventListener("load", () => {
      // Abre el modal si los parámetros de URL están presentes
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has("edit") || urlParams.has("create")) {
        modal.classList.add("open");
      }
    });

    // Cerrar modal y limpiar URL
    window.closeModal = function () {
      modal.classList.remove("open");
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.delete("edit");
      newUrl.searchParams.delete("create");
      window.history.pushState({}, "", newUrl.toString());
    };
  }

  // Lógica para el dropdown (reutilizamos la misma)
  document.addEventListener("click", (e) => {
    const toggle = e.target.closest(".btn-icon");
    if (toggle) {
      const wrapper = toggle.closest(".dropdown");
      const menu = wrapper.querySelector(".dropdown-menu");
      document.querySelectorAll(".dropdown-menu").forEach((m) => {
        if (m !== menu) m.classList.add("hidden");
      });
      menu.classList.toggle("hidden");
      return;
    }
    if (!e.target.closest(".dropdown")) {
      document.querySelectorAll(".dropdown-menu")
        .forEach((m) => m.classList.add("hidden"));
    }
  });

  // Cerrar modal con la tecla Esc
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      window.closeModal();
    }
  });
   
  });
</script>


<style>

@media (max-width: 1024px) {
  .dashboard-header {
    gap: 0.75rem;
  }
  .dashboard-header h2 {
    font-size: 1.3rem;
  }
  .btn.btn-primary {
    font-size: 0.9rem;
    padding: 0.4rem 0.8rem;
  }
}
@media (max-width: 768px) {
  .dashboard-header {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .dashboard-header h2 {
    margin-bottom: 0.25rem;
  }

  .dashboard-header .actions {
    display: flex;
    justify-content: flex-start;
  }

  .dashboard-header .btn {
    width: 100%;
    text-align: center;
  }

  /* Tabla scrollable horizontalmente */
  .table-responsive {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .table {
    width: 100%;
    min-width: 640px; /* evita que las celdas se aplasten */
    font-size: 0.9rem;
  }

  /* Dropdown menú no se corta */
  .dropdown-menu {
    position: fixed;
    right: 1rem;
    top: auto;
    transform: translateY(-0.5rem);
  }
}
@media (max-width: 480px) {
  .dashboard-header h2 {
    font-size: 1.1rem;
    text-align: center;
  }

  .dashboard-header .actions {
    justify-content: center;
  }

  .dashboard-header .btn {
    font-size: 0.85rem;
    padding: 0.35rem 0.6rem;
  }

  /* Tabla más compacta */
  .table {
    min-width: 520px;
  }

  /* Botón ⋮ más grande y táctil */
  .btn-icon {
    padding: 0.4rem 0.6rem;
    font-size: 1.2rem;
  }

  /* Dropdown ocupa menos espacio visual */
  .dropdown-menu {
    min-width: 140px;
    font-size: 0.85rem;
  }
}

</style>