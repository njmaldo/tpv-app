---
import { getSession } from "auth-astro/server";
import { actions } from "astro:actions";
import ProductModal from "@/components/ui/ProductModal.astro";
import ProductForm from "@/components/forms/ProductForm.astro";
import tursoClient from "@/lib/turso";
import {
  getLowStock,
  getActiveInactiveProducts,
  getTotalProducts,
  getProducts,
} from "@/lib/reportes";
import SearchInput from "../SearchInput.astro";

const session = await getSession(Astro.request);
const { user } = session ?? {};

const catResult = await Astro.callAction(actions.listCategories, undefined);
const categories = catResult.data?.data ?? [];

let products: any[] = [];
try {
  const rs = await tursoClient.execute(
    "SELECT * FROM bakery_items ORDER BY createdAt DESC",
  );
  products = (rs.rows as any[]).map((p) => {
    const created = new Date(p.createdAt);
    const diffDays = (Date.now() - created.getTime()) / (1000 * 60 * 60 * 24);
    return {
      ...p,
      isNew: diffDays <= 7, // badge si fue creado en los √∫ltimos 7 d√≠as
    };
  });
} catch (error) {
  console.error("Error cargando productos:", error);
}

const url = Astro.url;
const editProductId = url.searchParams.get("edit");
const createMode = url.searchParams.has("create");

let editingProduct = null;
if (editProductId) {
  editingProduct = products.find((p) => p.id === editProductId);
}

const showModal = !!editingProduct || createMode;

const { total } = await getTotalProducts();
const { inactivos } = await getActiveInactiveProducts();
const { activos } = await getActiveInactiveProducts();
const lowStock = await getLowStock();
---

<section class="dashboard">
  <div class="dashboard-header">
    <h2>Products</h2>
    <!-- Input de b√∫squeda -->
    <SearchInput  id="search-products" placeholder="Search products..." data-target=".table-products" />

    <div class="header-actions">
      <!-- Bot√≥n crear producto -->
      <a href={`${Astro.url.pathname}?create=true`} class="btn btn-primary" type="button" >
        + Create Product
      </a>
      <!-- Bot√≥n crear categor√≠a -->
      <a href="/admin/categorias" class="btn btn-primary" type="button">
        Manage Categories
      </a>
    </div>
  </div>

  <div class="dashboard-cards">
    <div class="card total">
      <h3>üì¶ Total Products</h3>
      <p>{total}</p>
    </div>

    <div class="card bajo-stock">
      <h3>üîª Low Stock</h3>
      {
        lowStock.length > 0 ? (
          <ul>
            {lowStock.map((p) => (
              <li class="stock">
                {p.name}: {p.stock} units
              </li>
            ))}
          </ul>
        ) : (
          <p>‚úÖ All stock is fine.</p>
        )
      }
    </div>

    <div class="card activos">
      <h3>üü¢ Actives</h3>
      <p>{activos}</p>
    </div>

    <div class="card inactivos">
      <h3>‚ö™ Inactives</h3>
      <p>{inactivos}</p>
    </div>
  </div>

  <div class="table-responsive">
    <table class="table table-products">
      <thead>
        <tr>
          <th>Image</th>
          <th>Name</th>
          <th>Price</th>
          <th>Category</th>
          <th>Active</th>
          <th>Actions</th>
          <th style="width:1px"></th>
        </tr>
      </thead>
      <tbody>
        {
          products.map((p) => (
            <tr>
              <td>
                {p.imageUrl ? (
                  <img
                    src={p.imageUrl}
                    alt={p.name}
                    width="40"
                    height="40"
                    style="object-fit:cover;border-radius:5px"
                  />
                ) : (
                  "‚Äî"
                )}
              </td>
              <td>
                {p.name}
                {p.isNew && <span class="badge-new">New</span>}
              </td>
              <td>${Number(p.price).toFixed(2)}</td>
              <td>
                {categories.find((c) => c.id === p.categoryId)?.name || "‚Äî"}
              </td>
              <td class={p.isActive ? "status-active" : "status-inactive"}>
                {p.isActive ? "‚úÖ" : "‚ùå"}
              </td>
              <td>
                <div class="dropdown">
                  <button class="btn-icon" type="button" aria-haspopup="true">‚ãÆ</button>
                  <div class="dropdown-menu hidden" role="menu">
                    <a
                      href={`${Astro.url.pathname}?edit=${p.id}`}
                      class="dropdown-item"
                    >
                      Edit
                    </a>
                    <form action={actions.toggleActive} method="post">
                      <input type="hidden" name="id" value={p.id} />
                      <input
                        type="hidden"
                        name="isActive"
                        value={p.isActive ? "0" : "1"}
                      />
                      <button type="submit" class="dropdown-item">
                        {p.isActive ? "Deactivate" : "Activate"}
                      </button>
                    </form>
                    <form
                      action={actions.deleteBakeryItem}
                      method="post"
                      onsubmit="return confirm('¬øDelete this product?')"
                    >
                      <input type="hidden" name="id" value={p.id} />
                      <button type="submit" class="btn dropdown-item danger">
                        Delete
                      </button>
                    </form>
                  </div>
                </div>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</section>

{
  showModal && (
    <ProductModal
      id="productModal"
      title={editingProduct ? "Edit Product" : "Add Product"}
    >
      <ProductForm categories={categories} product={editingProduct} />
    </ProductModal>
  )
}

<style>

  .total {
    border-left: 6px solid #3b82f6;
  }
  .bajo-stock {
    border-left: 6px solid #ef4444;
  }
  .activos {
    border-left: 6px solid #22c55e;
  }
  .inactivos {
    border-left: 6px solid #9ca3af;
  }

  .badge-new {
    background: #2563eb;
    color: white;
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 999px;
    margin-left: 6px;
    font-weight: 600;
  }

.dashboard-header .header-actions {
  display: flex;
  gap: 0.5rem;
}
@media (max-width: 1024px) {
  /* Header con m√°s espacio vertical */
  .dashboard-header {
    /* flex-wrap: wrap; */
    gap: 1rem;
  }
@media (max-width: 820px) {
  .dashboard-header {
    /* flex-direction: column;
    align-items: stretch; */
  }

  .btn-primary {
    padding: 0.1px 0.1px;
  }

  .dashboard-header .header-actions {
    /* justify-content: center;
    flex-wrap: wrap; */
    gap: 0.5rem;
  }

  /* Cards siguen en 2 columnas, pero centradas */
  .dashboard-cards {
    grid-template-columns: repeat(2, minmax(160px, 1fr));
    /* justify-items: center; */
  }

  /* Tabla ocupa todo el ancho con scroll si es necesario */
  .table-responsive table {
    width: 100%;
    min-width: 600px;
  }
  .search-input {

  }
}
@media (max-width: 640px) {
  /* Header apilado */
  .dashboard-header {
    flex-direction: column;
    align-items: stretch;
    gap: 0.75rem;
  }

  /* Input de b√∫squeda full width */
  .dashboard-header .search-input {
    width: 100%;
  }

  /* Botones apilados o en fila si entran */
  .dashboard-header .header-actions {
    display: flex;
    /* flex-direction: column; */
    gap: 0.5rem;
  }

  /* Cards en 2 columnas (2x2) */
  .dashboard-cards {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
  }
  /* Cards: 2 columnas en lugar de 4 */
  .dashboard-cards {
    grid-template-columns: repeat(2, 1fr);
  }
  .btn-primary {
    padding: 5px 10px;
  }
}
@media (max-width: 400px) {
    .dashboard-cards {
      grid-template-columns: 1fr;
    }
  }

  /* Tabla: scroll horizontal y tama√±o m√≠nimo */
  .table-responsive {
    overflow-x: auto;
  }

  .table-responsive table {
    width: 100%;
    min-width: 480px;
  }
}

</style>


<script is:inline>

  const modal = document.getElementById("productModal");

  if (modal) {
    window.addEventListener("load", () => {
      // Abre el modal si los par√°metros de URL est√°n presentes
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has("edit") || urlParams.has("create")) {
        modal.classList.add("open");
      }
    });

    // Cerrar modal y limpiar URL
    window.closeModal = function () {
      modal.classList.remove("open");
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.delete("edit");
      newUrl.searchParams.delete("create");
      window.history.pushState({}, "", newUrl.toString());
    };
  }
  // L√≥gica para el dropdown
  document.addEventListener("click", (e) => {
    const toggle = e.target.closest(".btn-icon");
    if (toggle) {
      const wrapper = toggle.closest(".dropdown");
      const menu = wrapper.querySelector(".dropdown-menu");
      document.querySelectorAll(".dropdown-menu").forEach((m) => {
        if (m !== menu) m.classList.add("hidden");
      });
      menu.classList.toggle("hidden");
      return;
    }
    if (!e.target.closest(".dropdown")) {
      document
        .querySelectorAll(".dropdown-menu")
        .forEach((m) => m.classList.add("hidden"));
    }
  });

  // Cerrar modal con la tecla Esc
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      window.closeModal();
    }
  });

</script>
