---
import type { BakeryItem } from '@/interfaces/BakeryItem';
import tursoClient from '@/lib/turso';

let bakeryItems:BakeryItem[] = [];
let error: string | null = null;

try {

	const rs = await tursoClient.execute("SELECT * FROM bakery_items");

	
  bakeryItems = rs.rows.map(({ id, name, description, price, imageUrl, createdAt, categoryId,stock}): BakeryItem => ({
      id: String(id),
      name: String(name),
      description: description ? String(description) : null,
      price: Number(price),
      imageUrl: imageUrl ? String(imageUrl) : null,
      createdAt: String(createdAt),
      categoryId: String(categoryId), 
      stock: Number(stock)
    })
  );
} catch (e) {
	console.error("Error al obtener productos de Turso:", e);
	error = "Error al cargar los productos de la panader√≠a.";
}
---

<section class="product-section">
  <h2 class="section-title">Our Products</h2>

  {error && (
    <div class="error-message">
      <p>{error}</p>
    </div>
  )}

  {bakeryItems.length === 0 && !error ? (
    <div class="no-products-message">
      There are no products available. Add some!
    </div>
  ) : (
    <div class="product-grid">
      {bakeryItems.map(({imageUrl,name,description,price}) => (
        <div class="product-card">
          <img
            src={
              imageUrl ||
              "https://placehold.co/300x200/FFDDC1/8B4513?text=No+Image"
            }
            alt={name}
            class="product-image"
          />
          <div class="product-info">
            <h3 class="product-name">{name}</h3>
            <p class="product-description">{description}</p>
            <div class="product-footer">
              <span class="product-price">
                ${price.toFixed(2)}
              </span>
              <button class="add-to-cart-button">
                Add to cart
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  )}
</section>

<style>
.product-section {
  padding: 2rem 1rem;
  background-color: #faf9f7;
}

.section-title {
  text-align: center;
  font-size: 2rem;
  font-weight: 700;
  color: #0D1B2A;
  margin-bottom: 2rem;
}

.error-message {
  background-color: #ffe6e6;
  border: 1px solid #ff9999;
  color: #cc0000;
  padding: 1rem;
  margin: 0 auto 1.5rem;
  max-width: 600px;
  border-radius: 6px;
  text-align: center;
}

.no-products-message {
  text-align: center;
  font-size: 1.1rem;
  color: #555;
  padding: 2rem;
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  gap: 1.5rem;
}

.product-card {
  background: #fff;
  border-radius: 10px;
  /* overflow: hidden; */
  box-shadow: 0 2px 8px rgba(0,0,0,0.06);
  display: flex;
  flex-direction: column;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.product-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 14px rgba(0,0,0,0.1);
}

.product-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
}

.product-info {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.product-name {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 0 0 0.5rem;
  color: #1B263B;
}

.product-description {
  font-size: 0.95rem;
  color: #555;
  flex-grow: 1;
  margin-bottom: 1rem;
}

.product-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.product-price {
  font-size: 1.1rem;
  font-weight: bold;
  color: #22C55E;
}

.add-to-cart-button {
  background-color: #0D1B2A;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background 0.2s ease;
}

.add-to-cart-button:hover {
  background-color: #22C55E;
}
</style>
