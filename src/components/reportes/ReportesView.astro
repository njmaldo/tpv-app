---
import { getAveragePurchase, getMonthlyPurchasesTotal, getMonthlyPurchasesTrend, 
         getPurchasesCount, 
         getTopSuppliers} from "@/lib/compras";
import {getDailySales,getDailySalesSeries,getInventoryStats,getInventoryValue,
        getLastMonthInventoryValue,getLowStock,getLowStockSeries,getMonthlyFinance,
        getMonthlyFinanceTrend,getMonthlySales,getMonthlySalesSeries,
        getTotalsByPeriod,} from "@/lib/reportes";

const { totalHoy } = await getDailySales();
const { totalMes } = await getMonthlySales();
const lowStock = await getLowStock();
const { totalValue } = await getInventoryValue();
const { totalValue: lastMonthValue } = await getLastMonthInventoryValue();
const { totalUnits, avgPrice } = await getInventoryStats();
// Series
const dailySeries = await getDailySalesSeries();
const monthlySeries = await getMonthlySalesSeries();
const stockSeries = await getLowStockSeries();
// calcular variaci√≥n %
let variation = 0;
if (lastMonthValue > 0) {
  variation = ((totalValue - lastMonthValue) / lastMonthValue) * 100;
}
// Ejecuto las consultas de finanzas
const { monthlySales, monthlyPurchases } = await getMonthlyFinance();
const { quarterTotal, semesterTotal, annualTotal } = await getTotalsByPeriod();

// Calculo el balance neto mensual
const netBalance = monthlySales - monthlyPurchases;
// Montly finance data 
const monthlyFinanceData = await getMonthlyFinanceTrend();
// Purchases
const totalPurchases = await getMonthlyPurchasesTotal();
const avgPurchase = await getAveragePurchase();
const purchasesCount = await getPurchasesCount();
const purchasesTrend = await getMonthlyPurchasesTrend();
const topSuppliers = await getTopSuppliers();
---

<section class="reportes">
  <h2>üìä Reports</h2>

  <nav class="reportes-nav">
    <button class="tab-btn active" data-tab="ventas">Sales</button>
    <button class="tab-btn" data-tab="stock">Stock</button>
    <button class="tab-btn" data-tab="purchases">Purchases</button>
    <button class="tab-btn" data-tab="finance">Finance</button>
  </nav>

  <div id="reportes-content" class="reportes-content">
    <div class="tab-content active" id="ventas">
      <h3>Sales Overview</h3>
      <div class="ventas-grid">
        <div class="reporte-card">
          <h3>üìÖ Today</h3>
          <p> <span data-price>{totalHoy}</span></p>
          <canvas class="chart-mini" id="chart-today"></canvas>
          <!-- <small class="trend-text">
            vs yesterday:
            <span
              id="trend-value"
              class={variation >= 0 ? "positive" : "negative"}>
              {variation >= 0 ? "+" : ""}{variation.toFixed(1)}%
            </span>
          </small> -->
        </div>

        <div class="reporte-card">
          <h3>üóìÔ∏è This Month</h3>
          <p> <span data-price>{totalMes}</span></p>
          <canvas class="chart-mini" id="chart-month"></canvas>
          <small class={variation >= 0 ? "positive" : "negative"}>
            {variation >= 0 ? "‚¨Ü" : "‚¨á"} {variation.toFixed(1)}% vs last month
          </small>
        </div>

        <div class="reporte-card">
          <h3>üí∞ Inventory Value</h3>
          <p> <span data-price>{totalValue}</span></p>

          <small class={variation >= 0 ? "positive" : "negative"}>
            {variation >= 0 ? "‚¨Ü" : "‚¨á"}
            {variation.toFixed(1)}% vs last month
          </small>

          <p><small>üì¶ items in stock:</small> {totalUnits.toLocaleString(undefined,{ minimumFractionDigits: 2 })}</p>
          <p><small>‚öñÔ∏è Avg. unit price:</small> ‚Ç± {avgPrice.toFixed(2)}</p>
        </div>
      </div>
    </div>
    <!-- Stock -->
    <div class="tab-content" id="stock">
    <div class="stock-grid">
    
    <!-- 1Ô∏è‚É£ Inventory Summary -->
    <div class="reporte-card">
      <h3>üì¶ Inventory Summary</h3>
      <p><strong>Total Items:</strong> {totalUnits.toLocaleString(undefined,{ minimumFractionDigits: 2 })}</p>
      <p><strong>Total Value:</strong> <span data-price> ‚Ç± {totalValue}</span></p>
      <!-- <p><strong>Total Value:</strong> ‚Ç± {totalValue.toFixed(2)}</p> -->
      <p><strong>Average Price:</strong> <span data-price>{avgPrice}</span></p>
    </div>

    <!-- 2Ô∏è‚É£ Stock Chart -->
    <div class="reporte-card chart-card">
      <h3>üìä Stock Overview</h3>
      <canvas id="chart-stock"></canvas>
    </div>

    <!-- 3Ô∏è‚É£ Low Stock Alerts -->
    <div class="reporte-card">
      <h3>‚ö†Ô∏è Low Stock Alerts</h3>
      {
        lowStock.length > 0 ? (
          <ul>
            {lowStock.map(({ name, stock }) => (
              <li>{name}: {stock} units</li>
            ))}
          </ul>
        ) : (
          <p>‚úÖ All stock is fine.</p>
        )
      }
    </div>
  </div>
    </div>
    <!-- Purchases -->
    <div class="tab-content" id="purchases">
  <div class="purchases-grid">
    
    <!-- 1Ô∏è‚É£ Purchases Summary -->
    <div class="reporte-card">
      <h3>üßæ Purchases Summary</h3>
      <p><strong>Total Purchases:</strong>  {purchasesCount.toLocaleString(undefined,{ minimumFractionDigits: 2 })}</p>
      <p><strong>This Month:</strong> <span data-price>{totalPurchases}</span></p>
      <p><strong>Average Purchase:</strong> <span data-price>{avgPurchase}</span></p>
    </div>

    <!-- 2Ô∏è‚É£ Monthly Purchases Chart -->
    <div class="reporte-card chart-card">
      <h3>üìä Monthly Purchases Trend</h3>
      <canvas id="chart-purchases"></canvas>
    </div>

    <!-- 3Ô∏è‚É£ Top Suppliers -->
    <div class="reporte-card">
      <h3>üèÜ Top Suppliers</h3>
      <ul>
        {topSuppliers.map(({ name, totalComprado }) => (
          <li>{name}: <span data-price>{totalComprado}</span></li>
        ))}
      </ul>
    </div>

  </div>

  

</div>
    <!-- Finance -->
    <div class="tab-content" id="finance">
      <div class="finance-grid">

        <!-- 1Ô∏è‚É£ Resumen mensual -->
        <div class="reporte-card">
          <h3>üìÖ Monthly Summary</h3>
          <p><strong>Sales:</strong> <span data-price>{monthlySales}</span></p>
          <p><strong>Purchases:</strong> <span data-price>{monthlyPurchases}</span></p>
          <hr>
          <p><strong>Net Balance:</strong> <span data-price> {(monthlySales - monthlyPurchases)}</span></p>
        </div>

        <!-- 2Ô∏è‚É£ Resumen general -->
        <div class="reporte-card">
          <h3>üìà Cumulative Totals</h3>
          <p><strong>Last 3 Months:</strong> <span data-price>{quarterTotal}</span></p>
          <p><strong>Last 6 Months:</strong> <span data-price>{semesterTotal}</span></p>
          <p><strong>This Year:</strong> <span data-price>{annualTotal}</span></p>
        </div>

        <!-- 3Ô∏è‚É£ Gr√°fico opcional -->
        <div class="reporte-card chart-card">
          <h3>Balance Overview</h3>
          <canvas id="chart-finance"></canvas>
        </div>

      </div>
    </div>

  </div>
</section>

<style>
  .reportes {
    padding-inline: 2rem;
    background-color: #f8f9fa;
    padding-top: 0.5rem;
  }

  .reportes h2 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    font-weight: 600;
    color: #0d1b2a;
  }

  /* --- Navegaci√≥n Tabs --- */
  .reportes-nav {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 2rem;
  }

  .tab-btn {
    flex: 1;
    padding: 0.6rem 1.2rem;
    border: none;
    background: #e5e7eb;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition:
      background 0.3s,
      color 0.3s;
  }

  .tab-btn.active {
    background: #0d1b2a;
    color: white;
  }

  .tab-btn:hover {
    background: #1b263b;
    color: white;
  }

  /* --- Contenido Tabs --- */
  .tab-content {
    display: none;
  }
  .tab-content.active {
    display: block;
  }

  /* --- Grid de m√©tricas --- */
  .ventas-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 1.2rem;
    margin-top: 1rem;
  }

  .reporte-card {
    background: #f2f2f2;
    border-radius: 0.8rem;
    padding: 1.5rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
    justify-content: center;
  }

  /* --- Jerarqu√≠a de texto --- */
  .reporte-card h3 {
    font-size: 1.125rem;
    font-weight: 500;
    color: #666;
    margin: 0.2rem 0;
  }

  .reporte-card p {
    font-size: 1.4rem;
    font-weight: 600;
    margin: 0;
    color: #0d1b2a;
  }

  .reporte-card small {
    font-size: 0.85rem;
    font-weight: 500;
  }
  /* charts */
  canvas {
    width: 100%;
    height: 120px;
  }
  /* === MINI CHARTS === */
  .chart-mini {
    width: 100%;
    height: 60px;
    margin-top: 0.5rem;
    background: linear-gradient(to bottom, #ffffff, #f2f2f2);
    border-radius: 4px;
  }
  .stock-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
}

.reporte-card {
  background: #f9fafb;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.chart-card {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.chart-card canvas {
  width: 100%;
  height: 160px;
}

.reporte-card h3 {
  font-size: 1rem;
  margin-bottom: 0.5rem;
  color: #0D1B2A;
}

.reporte-card p {
  margin: 0.3rem 0;
}

.reporte-card ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.reporte-card li {
  margin: 0.2rem 0;
  color: #1B263B;
}
.purchases-grid {
  display: grid;
  gap: 1.5rem;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  align-items: start;
}

.reporte-card {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
  padding: 1.5rem;
}

.chart-card {
  padding: 1rem;
  text-align: center;
}

.finance-grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}
  /* Texto de tendencia bajo los gr√°ficos */
  .trend-text {
    font-size: 0.85rem;
    color: #666;
    margin-top: 0.4rem;
  }

  /* Ajustes visuales de las cards con gr√°fico */
  .reporte-card {
    position: relative;
    padding-bottom: 1rem;
  }

  .reporte-card p {
    font-size: 1.5rem;
    font-weight: 600;
    color: #0d1b2a;
  }

  .reporte-card small {
    font-size: 0.85rem;
  }

  /* Badge de comparativa */
  .positive {
    color: #22c55e;
  }

  .negative {
    color: #ef4444;
  }

  /* --- Secci√≥n Stock y Compras --- */
  #stock ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  #stock li {
    font-size: 0.95rem;
    padding: 0.3rem 0;
    border-bottom: 1px solid #f0f0f0;
  }

  #stock li:last-child {
    border-bottom: none;
  }

  #compras p {
    color: #666;
    font-size: 1rem;
  }

  /* --- Responsive --- */
  @media (max-width: 768px) {
    .ventas-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
<!-- <style>
    .reportes {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 1.5rem;
      background: #f9fafb;
      border-radius: 1rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
      font-family: system-ui, sans-serif;
    }

    .reportes h2 {
      font-size: 1.8rem;
      margin-bottom: 1rem;
      color: #0d1b2a;
    }

    /* Tabs */
    .reportes-nav {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .tab-btn {
      flex: 1;
      padding: 0.75rem 1rem;
      border: 2px solid transparent;
      background: #e5e7eb;
      border-radius: 0.5rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .tab-btn:hover {
      background: #d1d5db;
    }

    .tab-btn.active {
      background: #0d1b2a;
      color: #fff;
      border-color: #0d1b2a;
    }

    /* Tab content */
    .reportes-content {
      margin-top: 1rem;
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* Cards */
    .reporte-card {
      background: #fff;
      border: 1px solid #e5e7eb;
      border-radius: 0.75rem;
      padding: 1rem;
      margin-bottom: 1rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.04);
    }

    .reporte-card p {
      font-size: 1rem;
      color: #1f2937;
    }

    /* Grid for sales cards */
    #ventas .reporte-card {
      margin: 0;
    }

    #ventas .ventas-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }
  </style> -->
<!-- JSON para JS -->
<script id="daily-data" type="application/json" set:html={JSON.stringify(dailySeries)} />
<script id="monthly-data" type="application/json" set:html={JSON.stringify(monthlySeries)} />
<script id="stock-data" type="application/json" set:html={JSON.stringify(stockSeries)} />
<script id="finance-data" type="application/json" set:html={JSON.stringify(monthlyFinanceData)} />
<script id="purchases-data" type="application/json" set:html={JSON.stringify(purchasesTrend)} />


<script is:inline>
  document.querySelectorAll(".tab-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
      document
        .querySelectorAll(".tab-btn")
        .forEach((b) => b.classList.remove("active"));
      document
        .querySelectorAll(".tab-content")
        .forEach((c) => c.classList.remove("active"));

      btn.classList.add("active");
      const tab = btn.dataset.tab;
      document.getElementById(tab).classList.add("active");
    });
  });
  // Conectar los reportes con los botones
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll(".tab-btn");
    const contents = document.querySelectorAll(".tab-content");
    buttons.forEach((btn) =>
      btn.addEventListener("click", () => {
        buttons.forEach((b) => b.classList.remove("active"));
        contents.forEach((c) => c.classList.remove("active"));
        btn.classList.add("active");
        document.getElementById(btn.dataset.tab).classList.add("active");
      }),
    );
  });

  // gr√°ficos de barra
  document.addEventListener("DOMContentLoaded", () => {
    // Helper para leer los bloques JSON
    const getData = (id) => {
      const el = document.getElementById(id);
      return el ? JSON.parse(el.textContent) : [];
    };

    const dailyData = getData("daily-data");
    const monthlyData = getData("monthly-data");
    const stockData = getData("stock-data");

    // === Ventas Diarias ===
    const ctxDaily = document.getElementById("chart-today");
    if (ctxDaily && dailyData.length) {
      new Chart(ctxDaily, {
        type: "bar",
        data: {
          labels: dailyData.map((d) => d.date),
          datasets: [
            {
              label: "Sales (‚Ç±)",
              data: dailyData.map((d) => d.total),
              backgroundColor: "#22C55E",
              borderRadius: 5,
            },
          ],
        },
        options: {
          plugins: { legend: { display: false } },
          scales: {
            x: { ticks: { color: "#0D1B2A" }, grid: { display: false } },
            y: { beginAtZero: true, ticks: { color: "#0D1B2A" } },
          },
        },
      });
    }

    // === Ventas Mensuales ===
    const ctxMonthly = document.getElementById("chart-month");
    if (ctxMonthly && monthlyData.length) {
      new Chart(ctxMonthly, {
        type: "bar",
        data: {
          labels: monthlyData.map((m) => m.month),
          datasets: [
            {
              label: "Monthly Sales (‚Ç±)",
              data: monthlyData.map((m) => m.total),
              backgroundColor: "#22C55E",
              borderRadius: 5,
            },
          ],
        },
        options: {
          plugins: { legend: { display: false } },
          scales: {
            x: { ticks: { color: "#0D1B2A" }, grid: { display: false } },
            y: { beginAtZero: true, ticks: { color: "#0D1B2A" } },
          },
        },
      });
    }

    // === Stock bajo ===
    const ctxStock = document.getElementById("chart-stock");
    if (ctxStock && stockData.length) {
      new Chart(ctxStock, {
        type: "bar",
        data: {
          labels: stockData.map((s) => s.name),
          datasets: [
            {
              label: "Stock actual",
              data: stockData.map((s) => s.stock),
              backgroundColor: "#EF4444",
              borderRadius: 5,
            },
          ],
        },
        options: {
          plugins: { legend: { display: false } },
          scales: {
            x: { ticks: { color: "#0D1B2A" }, grid: { display: false } },
            y: { beginAtZero: true, ticks: { color: "#0D1B2A" } },
          },
        },
      });
    }

    // Finanzas
  const financeData = JSON.parse(document.getElementById("finance-data").textContent);
const ctx = document.getElementById("chart-finance");

const labels = financeData.map(item => {
  const [year, month] = item.month.split("-");
  const monthNames = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
  return monthNames[parseInt(month) - 1];
});

const salesData = financeData.map(item => item.sales);
const purchasesData = financeData.map(item => item.purchases);
const netData = financeData.map(item => item.net);

new Chart(ctx, {
  type: "bar", // o "line" si quer√©s mostrar tendencia
  data: {
    labels,
    datasets: [
      {
        label: "Sales",
        data: salesData,
        backgroundColor: "#22C55E",
        borderColor: "#22C55E",
        borderWidth: 1,
      },
      {
        label: "Purchases",
        data: purchasesData,
        backgroundColor: "#EF4444",
        borderColor: "#EF4444",
        borderWidth: 1,
      },
      {
        label: "Net Balance",
        data: netData,
        backgroundColor: "#0D1B2A",
        borderColor: "#0D1B2A",
        borderWidth: 1,
      },
    ],
  },
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: "bottom",
        labels: { color: "#0D1B2A" },
      },
      title: {
        display: true,
        text: "Monthly Evolution (Last 12 Months)",
        color: "#0D1B2A",
        font: { size: 16, weight: "bold" },
      },
    },
    scales: {
      x: {
        ticks: { color: "#0D1B2A" },
        grid: { display: false },
      },
      y: {
        beginAtZero: true,
        ticks: { color: "#0D1B2A" },
        grid: { color: "#E5E7EB" },
      },
    },
  },
});
// Purchases chart
const purchasesChartData = JSON.parse(document.getElementById("purchases-data").textContent);
const purchasesChartCtx = document.getElementById("chart-purchases");

const purchasesChartLabels = purchasesChartData.map(d => d.month);
const purchasesChartTotals = purchasesChartData.map(d => d.total);

new Chart(purchasesChartCtx, {
  type: "bar",
  data: {
    labels: purchasesChartLabels, 
    datasets: [{
      label: "Monthly Purchases",
      data: purchasesChartTotals,
      borderColor: "#0D1B2A",
      backgroundColor: "rgba(34,197,94,0.2)",
      tension: 0.3,
      fill: true,
      borderWidth: 2,
      pointRadius: 4,
      pointBackgroundColor: "#22C55E",
    }]
  },
  options: {
    responsive: true,
    plugins: {
      legend: { display: false },
      tooltip: {
        callbacks: {
          label: ctx => `‚Ç± ${ctx.parsed.y.toFixed(2)}`
        }
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: { color: "#0D1B2A" }
      },
      x: {
        ticks: { color: "#0D1B2A" }
      }
    }
  }
});

}); //cierra el DOMContentLoaded
  
</script>
