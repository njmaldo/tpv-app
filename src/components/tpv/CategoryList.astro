---
import type { Category } from "@/interfaces/BakeryItem";

interface Props {
  categories: Category[];
}

const { categories } = Astro.props;
---

<nav class="category-list" aria-label="Filtro de categorÃ­as">
  <ul>
    <li>
      <button type="button" class="category-btn" data-id="all">All</button>
    </li>
    {
      categories.map(({ id, name }) => (
        <li>
          <button type="button" class="category-btn" data-id={id}>
            {name}
          </button>
        </li>
      ))
    }
  </ul>

  <div class="tpv-actions">
    <!-- Apertura de turno -->
    <button type="button" id="btn-open-shift" class="category-btn">
      ðŸŸ¢ Open Shift
    </button>

    <!-- Cierre de turno -->
    <button type="button" id="btn-close-shift" class="category-btn">
      ðŸ”´ Cash Closing
    </button>
  </div>
</nav>

<script>
  import { selectedCategory } from "@/stores/filters.ts";

  const categoryList = document.querySelector(".category-list");

  if (categoryList) {
    categoryList.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      const button = target.closest<HTMLButtonElement>(".category-btn");

      if (button) {
        const categoryId = button.dataset.id || "all"; // uso data-id, no dataset.categoryId
        selectedCategory.set(categoryId);

        // feedback visual
        const currentActive = categoryList.querySelector(".active");
        currentActive?.classList.remove("active");
        button.classList.add("active");

      }
    });
  }
</script>

<style>
  .category-list {
    grid-column: 1 / 4;
    grid-row: 1 / 1;
    background-color: #f59e0b;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-inline: 0.75rem;
  }
  .category-list ul {
    display: flex;
    list-style: none;
    gap: var(--spacing-sm);
    padding: 0.5rem;
  }
  .category-btn {
    background-color: #f8f8f8;
    color: #555;
    font-size: 1rem;
    padding: 5px 10px;
    border-radius: 5px;
    border: 1px solid #ddd;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
    min-width: 120px;
    text-align: center;
  }

  .category-btn:hover {
    background-color: #fff;
    border-color: #ccc;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .category-btn.active {
    background-color: #f46214;
    color: white;
    font-weight: 600;
    border-color: #f7931e;
    box-shadow: 0 4px 12px rgba(247, 147, 30, 0.4);
    transform: translateY(0);
  }
  .tpv-actions {
    gap: 0.5rem;
    margin-right: 0.5rem;
    min-width: 150px;
  }
  .btn-open-shift {
    background-color: transparent;
    border: 2px solid green;
    /* border-radius: 6px; */
    padding: 0.6rem 1rem;
    cursor: pointer;
    transition: background 0.2s ease-in-out;
  }
  .btn-open-shift:hover {
    background-color: green;
    color: white;
  }
  .btn-close-shift {
    background-color: transparent;
    /* background-color: #e11d48;  */
    color: #555;
    font-weight: 600;
    /* border: none; */
    border: 2px solid #e11d48;
    border-radius: 6px;
    margin-right: 1rem;
    padding: 0.6rem 1rem;
    cursor: pointer;
    transition: background 0.2s ease-in-out;
  }

  .btn-close-shift:hover {
    background-color: #be123c;
    color: white;
  }
</style>

