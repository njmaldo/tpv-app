---
import type { BakeryItem } from '@/interfaces/BakeryItem';

interface Props {
  products: BakeryItem[];
}

const { products } = Astro.props;
---
<div class="product-grid-container">
  <div class="product-grid" id="product-grid"></div>
</div>

<script id="all-products-data" type="application/json" set:html={JSON.stringify(products)}></script>

<script>
  import { addItemToCart } from '@/stores/cart.ts';
  import { selectedCategory } from '@/stores/filters.ts';
  import type { BakeryItem } from '@/interfaces/BakeryItem';

  const productGrid = document.getElementById('product-grid');
  const allProductsData = document.getElementById('all-products-data');

  if (!productGrid || !allProductsData) {
    console.error('Elementos no encontrados.');
  } else {
     const rawProducts = JSON.parse(allProductsData.textContent);
     const allProducts = rawProducts.map((product: any) => ({
      ...product,
      price: Number(product.price),
      stock: Number(product.stock),
     
    })) as BakeryItem[];

    function renderProducts(filterCategoryId: string | null) {
      if (!productGrid) return;
      productGrid.innerHTML = '';

      const filteredProducts = filterCategoryId === 'all' || !filterCategoryId
        ? allProducts
        : allProducts.filter(p => p.categoryId === filterCategoryId);

      filteredProducts.forEach(product => {
        const card = document.createElement('div');
        card.className = 'product-card';
        card.dataset.id = product.id;
        
        // Mostrar el stock y deshabilitar si está agotado
        if (product.stock === 0) {
            card.classList.add('out-of-stock');
            card.style.pointerEvents = 'none';
            card.style.opacity = '0.5'; 
        }
        
        const imageUrl = product.imageUrl && product.imageUrl.trim() !== ''
              ? product.imageUrl
              : "https://placehold.co/300x200?text=Sin+Imagen";

        card.innerHTML = `
        <div class="product-image-container">
          <img src="${imageUrl}" alt="${product.name}" class="product-image" />
        </div>
        <div class="product-info">
          <h3 class="product-name">${product.name}</h3>
          <p class="product-price">₱ ${product.price.toFixed(2)}</p>
          <p class="product-stock">Stock:${product.stock > 0 ? product.stock : 'Agotado'}</p>
        </div>
      `;
          productGrid.appendChild(card);
      });
    }

    selectedCategory.subscribe(categoryId => {
      renderProducts(categoryId);
    });

    productGrid.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const productCard = target.closest('.product-card');

      if (productCard) {
        const htmlProductCard = productCard as HTMLElement;
        const productId = htmlProductCard.dataset.id;
        const product = allProducts.find(p => p.id === productId);

        if (product) {
          addItemToCart(product);
        }
      }
    });

    renderProducts(null);
  }
</script>
<!-- <style>
.product-grid-container {
  grid-column: 1 / 3;
  grid-row: 2/3;
  gap: 1rem;
  overflow: auto;
}
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1rem;
  padding: 1rem;
}

.product-card {
  display: flex;
  flex-direction: column;
  border-radius: 8px;
  background: #fff;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  width: 200px;      
} 
.product-image-container {
  width: 100%;
  height: 150px;      
  overflow: hidden;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.product-info {
  flex: 1;
  padding: 0.5rem;
  text-align: center;
}

.product-name {
  font-size: 1rem;
  margin: 0.3rem 0;
}

.product-price{
  font-size: 0.9rem;
  margin: 0;
}
.product-info .product-stock {
  font-size: 50px !important;
  margin: 0.2rem 0  !important;
}

.out-of-stock {
  opacity: 0.6;
  pointer-events: none;
}
</style> -->
