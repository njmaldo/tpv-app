---
import type { BakeryItem } from '@/interfaces/BakeryItem';

interface Props {
  products: BakeryItem[];
}

const { products } = Astro.props;
---

<div class="product-grid-container">
  <div id="product-grid" class="product-grid"></div>
</div>

<!-- Exportamos los productos del servidor a JS -->
<script id="all-products-data" type="application/json" set:html={JSON.stringify(products)}></script>

<script>
  import { addItemToCart } from '@/stores/cart.ts';
  import { selectedCategory } from '@/stores/filters.ts';
  import type { BakeryItem } from '@/interfaces/BakeryItem';

  const productGrid = document.getElementById('product-grid');
  const allProductsData = document.getElementById('all-products-data');

  if (!productGrid || !allProductsData) {
    console.error('No se encontrÃ³ productGrid o allProductsData');
  } else {
    // ðŸ”¹ Aseguramos que products no se pierda en el parse
    let allProducts: BakeryItem[] = [];
    try {
      allProducts = JSON.parse(allProductsData.textContent).map((p: any) => ({
        ...p,
        price: Number(p.price ?? 0),
        stock: Number(p.stock ?? 0),
        categoryId: String(p.categoryId ?? '').trim(), // siempre string
      }));
    } catch (err) {
      console.error('Error parseando productos:', err);
    }

    function renderProducts(filterCategoryId: string | null) {
      if (!productGrid) return;
      productGrid.innerHTML = '';

      const normalized = filterCategoryId?.trim().toLowerCase() || 'all';

      const filtered = normalized === 'all'
        ? allProducts
        : allProducts.filter(p => p.categoryId.trim().toLowerCase() === normalized);

      if (filtered.length === 0) {
        productGrid.innerHTML = '<p>No products in this category.</p>';
        return;
      }

      filtered.forEach(product => {
        const card = document.createElement('div');
        card.className = 'product-card';
        card.dataset.id = product.id;

        if (product.stock === 0) {
          card.classList.add('out-of-stock');
          card.style.pointerEvents = 'none';
          card.style.opacity = '0.5';
        }

        const imageUrl = product.imageUrl?.trim()
          ? product.imageUrl
          : 'https://placehold.co/300x200?text=Sin+Imagen';

        card.innerHTML = `
          <div class="product-image-container">
            <img src="${imageUrl}" alt="${product.name}" class="product-image" />
          </div>
          <div class="product-info">
            <h3 class="product-name">${product.name}</h3>
            <p class="product-price">â‚± ${product.price.toFixed(2)}</p>
            <p class="product-stock">Stock: ${product.stock > 0 ? product.stock : 'Agotado'}</p>
          </div>
        `;

        productGrid.appendChild(card);
      });
    }


    // ðŸ”¹ SuscripciÃ³n al store de categorÃ­as
    selectedCategory.subscribe(categoryId => {
      renderProducts(categoryId);
    });

    // ðŸ”¹ Render inicial con todos los productos
    renderProducts('all');

    // ðŸ”¹ DelegaciÃ³n de clicks para el carrito
    productGrid.addEventListener('click', (e) => {
      const card = (e.target as HTMLElement).closest('.product-card') as HTMLElement | null;
      if (!card) return;

      const productId = card.dataset.id; 
      const product = allProducts.find(p => p.id === productId);

      if (product) {
        addItemToCart(product);
      }
    });
  }
</script>
