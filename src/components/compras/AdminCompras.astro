---
import { createSupplier, listSuppliers } from "@/actions/proveedores";
import { createPurchase,deletePurchase} from "@/actions/compras";
import { actions } from "astro:actions";
import type {Supplier} from '@/interfaces/Supplier';
import type { PurchaseWithSupplier } from "@/interfaces/Purchase";
import { getAveragePurchase, getDailyPurchasesTotal, getMonthlyPurchasesTotal, 
         getPurchasesCount, getDailyComparison, 
getMonthlyComparison,
getLast30DaysPurchases,
getTopSuppliers} from "@/lib/compras";
import ProductModal from "../ui/ProductModal.astro";
import UpdatePurchaseForm from "../forms/UpdatePurchaseForm.astro";

// crear proveedores
const proveedor = await Astro.callAction(actions.listSuppliers, undefined);
const suppliers: Supplier[] = proveedor.data ?? [];
// Listar compras
const compra = await Astro.callAction(actions.listPurchases, undefined);
const purchases: PurchaseWithSupplier[] = compra.data ?? [];
// compras Today
const todayTotal = await getDailyPurchasesTotal();
// Compras monthly
const totalMonthly = await getMonthlyPurchasesTotal();
// Total de compras efectuadas
const totalPurchases = await getPurchasesCount();
// Promedio Compras
const averagePurchases = await getAveragePurchase();
// Comparacion diaria
const dailyComparison = await getDailyComparison();
// Comparacion mensual
const monthlyComparison = await getMonthlyComparison();
// Compras recientes 5  ultimas 30 dias
const url = new URL(Astro.request.url);
const filter = url.searchParams.get("filter");

let ultimasCompras;
if (filter === "30") {
  ultimasCompras = await getLast30DaysPurchases(); 
} else {
  ultimasCompras = await getLast30DaysPurchases(10); 
}
// Top Suppliers
const topSuppliers = await  getTopSuppliers();
---


<section class="compras-dashboard">
  <div class="compras-header">
    <div>
      <h1>ðŸ’³ Purchases</h1>
      <p class="muted">Expense and suppliers control </p>
    </div>
    <div class="header-actions">
      <!-- Esta acciÃ³n puede abrir un modal o navegar a ?create=true -->
      <button class="btn btn-primary" id="open-add-purchase">+ Add Purchase</button>
    </div>
  </div>

  <!-- KPI cards -->
  <div class="kpi-grid">
    <div class="kpi-card">
      <div class="kpi-title">ðŸ“… Today</div>
      <div class="kpi-value">â‚± {todayTotal.toFixed(2)}</div>
      <div class="kpi-sub">vs yesterday: <span class="kpi-diff positive"> {dailyComparison.changePercent >= 0 ? "+" : ""}{dailyComparison.changePercent.toFixed(1)}%</span></div>
    </div>

    <div class="kpi-card">
      <div class="kpi-title">ðŸ“† This month</div>
      <div class="kpi-value">â‚± {totalMonthly.toFixed(2)}</div>
      <div class="kpi-sub">vs last month: <span class="kpi-diff negative">{monthlyComparison.changePercent >= 0 ? "+" : ""}{monthlyComparison.changePercent.toFixed(1)}%
  </span></span></div>
    </div>

    <div class="kpi-card">
      <div class="kpi-title">ðŸ“ˆ Avg. purchase</div>
      <div class="kpi-value">â‚± {averagePurchases.toFixed(2)}</div>
      <div class="kpi-sub">average per transaction</div>
    </div>

    <div class="kpi-card">
      <div class="kpi-title">ðŸ§¾ Purchases</div>
      <div class="kpi-value">{totalPurchases}</div>
      <div class="kpi-sub">total records</div>
    </div>
  </div>

  <!-- Main layout: left content + right sidebar -->
  <div class="main-grid">
    <!-- Left: table + chart -->
    <div class="main-col">
      <!-- Recent purchases table -->
      <div class="card">
        <div class="card-h">
          <h3>Recent purchases</h3>
          <div class="card-actions">
            <a class="link" href="/admin/compras?filter=30">View last 30 days</a>
          </div>
        </div>

        <div class="table-wrap">
          <table class="table">
            <thead>
              <tr class="table-title">
                <th>Date</th>
                <th>Supplier</th>
                <th>Item / Note</th>
                <th class="right">Qty</th>
                <th class="right">Unit</th>
                <th class="right">Total</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {
              purchases.map((c) => (
                <tr>
                  <td>{c.createdAt.split(" ")[0]}</td>
                  <td>{c.supplierName}</td>
                  <td>{c.productName}</td>
                  <td class="right">{c.quantity}</td>
                  <td class="right">â‚± {c.unitPrice}</td>
                  <td class="right">â‚± {c.total}</td>
                  <td>
                    <div class="dropdown">
                      <button class="dropdown-toggle">â‹®</button>
                      <div class="dropdown-menu">
                        <button type="button" class="dropdown-item" data-purchase={encodeURIComponent(JSON.stringify(c))}onclick="handleEditClick(this)">
                          Edit
                        </button>
                        
                        <form method="post" action={actions.deletePurchase} onsubmit="return confirm('Delete?')">
                          <input type="hidden" name="id" value={c.id} />
                          <button class="dropdown-item danger" type="submit">Delete</button>
                        </form>
                      </div>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>

          </table>
        </div>
      </div>

    </div>

    <!-- Right: sidebar (Suppliers + Add Purchase form) -->
    <aside class="sidebar-col">
      <!-- <div class="card">
        <div class="card-h">
          <h4>Top suppliers</h4>
          <a class="link small" href="/admin/suppliers">Manage</a>
        </div>

        <ul class="supplier-list">
             {
              topSuppliers.map(({ name, totalComprado, porcentaje }) => (
                <li>
                  <div class="supplier-name">{name}</div>
                  <div class="supplier-meta">
                    â‚± {totalComprado.toLocaleString()} â€¢ {porcentaje.toFixed(1)}%
                  </div>
                </li>
              ))
            }
        </ul>
      </div> -->

      <!-- Collapsible Add Purchase form (usa <details> para no requerir JS) -->
      <details class="card" id="add-purchase">
        <summary class="card-h">
          <h4>Add new purchase</h4>
        </summary>

        <form method="POST" action={actions.createPurchase} class="form">
          <label>
            Date
            <input type="date" name="purchaseDate" value="" required />
          </label>

          <label>
            Product Name (or Description)
            <input type="text" name="productName" placeholder="e.g. Harina 50kg" required />
          </label>

          <label>
            Supplier
            <select name="supplierId" required>
              <option value="">Select supplier</option>
              {suppliers.map(({id,name}) => (
              <option value={id}>{name}</option>
              ))}
            </select>
          </label>

          <div class="form-row">
            <label>
              Quantity
              <input type="number" name="quantity" min="0" step="1" required />
            </label>

            <label>
              Unit price
              <input type="number" name="unitPrice" min="0" step="0.01" required />
            </label>
          </div>

          <div class="form-actions">
            <button class="btn btn-primary" type="submit">Register purchase</button>
            <button type="button" class="btn ghost" onclick="document.getElementById('add-purchase').removeAttribute('open')">Cancel</button>
          </div>
        </form>      
      </details>

      <!-- Quick add supplier -->
      <details class="card">
        <summary class="card-h">
          <h4>Add supplier</h4>
        </summary>
        <form method="post" action={actions.createSupplier} class="form">
          <label>
            Name
            <input name="name" required />
          </label>
          <label>
            Product type
            <input name="productType" required/>
          </label>
          <label>
            Phone
            <input name="phone" required />
          </label>
          <label>
            Email
            <input name="email" type="email" required />
          </label>
          <label>
            City
            <input name="city" required />
          </label>
          <div class="form-actions">
            <button class="btn btn-primary" type="submit">Save supplier</button>
          </div>
        </form>
      </details>
    </aside>
  </div>
  <!-- Modal UpdatePurchaseForm -->
<ProductModal id="edit-purchase" title="Edit Purchase">
  <UpdatePurchaseForm {suppliers} />
</ProductModal>

</section>

<style>

.compras-dashboard{
  /* margin:1.5rem auto; */
  padding-inline:1.25rem;
  padding-top: 1.5rem;
  font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;
  color:#0f172a;
  background: #f5f5f5;
}

/* header */
.compras-header{
  display:flex;
  justify-content:space-between;
  align-items:flex-end;
  gap:1rem;
  margin-bottom:1rem;
}
.compras-header h1{
  margin:0;
  font-size:1.4rem
}
.muted{
  color:var(--muted);
  font-size:0.9rem;margin:0.15rem 0
}

/* KPIs */
.kpi-grid{
  display:grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap:var(--gap);
  margin-bottom:1.25rem;
}
.kpi-card{
  background:var(--card);
  padding:1rem;
  border-radius:10px;
  box-shadow:var(--shadow);
  text-align:center;
}
.kpi-title{
  color:var(--muted);
  font-weight:600;
  margin-bottom:0.4rem
}
.kpi-value{
  font-size:1.5rem;
  font-weight:700;
  color:var(--accent)
}
.kpi-sub{
  font-size:0.85rem;
  color:var(--muted);
  margin-top:0.4rem
}
.kpi-diff.positive{
  color:var(--positive);
  font-weight:700
}
.kpi-diff.negative{
  color:var(--negative);
  font-weight:700
}

/* main layout */
.main-grid{
  display:grid;
  grid-template-columns: 1fr 320px;
  gap:1rem;
  align-items:start;
}
.main-col {
  display: flex;
  flex-direction: column;
}

.main-col > .card:first-child {
  flex: 1; /* que ocupe todo el espacio disponible */
}

/* card */
.card{
  background:var(--card);
  border-radius:10px;
  padding:1rem;
  box-shadow:var(--shadow);
}
.card-h{
  display:flex;
  justify-content:space-between;
  align-items:center;
  margin-bottom:0.5rem
}
.card h3{
  margin:0;
  font-size:1rem;
  color:#0f172a
}
.card .link{
  font-size:0.9rem;
  color:var(--accent);
  text-decoration:none
}
.table-title {
  background-color: #f0f0f0;
}
/* table */
.table-wrap{
  /* overflow:auto */
}
.table{
  width:100%;
  border-collapse:collapse;
  font-size:0.95rem
}
.table thead th{
  text-align:left;
  padding:0.6rem 0.5rem;
  color:var(--muted);
  font-weight:600;
  border-bottom:1px solid #eef2f7
}
.table tbody td{
  padding:0.6rem 0.5rem;
  border-bottom:1px solid #f3f4f6
}
/* Cebra style */
.table tbody tr:nth-child(odd) {
  background: #fafafa; /* un gris muy claro */
}

.table tbody tr:nth-child(even) {
  background: #ffffff; /* blanco */
}
/* Al pasar el mouse */
.table tbody tr:hover {
  background: #f1f5f9; /* un gris mÃ¡s notorio al pasar el mouse */
}
.table tbody tr {
  transition: background 0.2s ease;
}

.table .right{
  text-align: start;
}
/* Dropdown base */
.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-toggle {
  background: transparent;
  border: none;
  font-size: 1.2rem;
  cursor: pointer;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
}

.dropdown-toggle:hover {
  background: rgba(0,0,0,0.05);
}

/* MenÃº */
.dropdown-menu {
  display: none;
  position: absolute;
  right: 0;
  top: 100%;
  background: white;
  border: 1px solid #ddd;
  border-radius: 6px;
  min-width: 120px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  z-index: 10;
}

.dropdown-menu .dropdown-item {
  display: block;
  width: 100%;
  padding: 0.5rem 0.75rem;
  text-align: left;
  font-size: 0.9rem;
  background: none;
  border: none;
  cursor: pointer;
}

.dropdown-menu .dropdown-item:hover {
  background: #f5f5f5;
}

.dropdown-menu .danger {
  color: #d32f2f;
}
/* .................................. */
.actions-inline{
  display:flex;
  gap:0.5rem;
  align-items:center
}
.icon{
  background:none;
  border:none;
  color:var(--accent);
  cursor:pointer;
  padding:0.25rem 0.5rem
}
.icon.danger{
  color:var(--negative)
}

/* sidebar */
.sidebar-col{
  display:flex;
  flex-direction:column;
  gap:1rem
}
.supplier-list{
  list-style:none;
  padding:0;
  margin:0
}
.supplier-list li{
  display:flex;
  justify-content:space-between;
  padding:0.6rem 0;
  border-bottom:1px solid #f3f4f6;
}

/* form */
.form{
  display:flex;
  flex-direction:column;
  gap:0.6rem
}
.form label{
  display:flex;
  flex-direction:column;
  font-size:0.9rem
}
.form input, .form select{
  padding:0.45rem;
  border:1px solid #e6e9ee;
  border-radius:6px
}
.form-row{
  display:grid;
  grid-template-columns:1fr 1fr;
  gap:0.6rem
}
.form-actions{
  display:flex;
  gap:0.5rem;
  margin-top:0.5rem;
}
.btn{
  padding:0.6rem 0.9rem;
  border-radius:8px;
  border:1px solid transparent;
  cursor:pointer;
}
.btn-primary{
  background:var(--accent);
  color:#fff;
}
.btn.ghost{
  background:transparent;
  border:1px solid #666;
}
.link.small{
  font-size:0.85rem;
  color:var(--muted);
}

@media (max-width: 980px){
  .main-grid{
    grid-template-columns:1fr 300px; 
  }
}
@media (max-width: 820px){
  .main-grid{
    grid-template-columns:1fr;
  }
  .sidebar-col{
    order:2;
  }
}
</style>
<script is:inline>
  document.addEventListener("click", (e) => {
    
    document.querySelectorAll(".dropdown-menu").forEach(menu => {
      if (!menu.contains(e.target) && !menu.previousElementSibling.contains(e.target)) {
        menu.style.display = "none";
      }
    });

    // Abre/cierra el dropdown actual
    if (e.target.classList.contains("dropdown-toggle")) {
      const menu = e.target.nextElementSibling;
      menu.style.display = menu.style.display === "block" ? "none" : "block";
    }
  });
 function handleEditClick(btn) {
  const raw = btn.dataset.purchase;
  const purchase = JSON.parse(decodeURIComponent(raw));
  openEditModal(purchase);
}

function openEditModal(purchase) {
  // Rellenar los campos del formulario
  document.getElementById('edit-id').value = purchase.id;
  document.getElementById('edit-date').value = purchase.purchaseDate.split('T')[0]; 
  document.getElementById('edit-product').value = purchase.productName;
  document.getElementById('edit-supplier').value = purchase.supplierId;
  document.getElementById('edit-qty').value = purchase.quantity;
  document.getElementById('edit-price').value = purchase.unitPrice;

  // Abrir el modal
  openModal('edit-purchase');
}

// Cerrar modal con tecla ESC
document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") {
    closeModal('edit-purchase');
  }
});


</script>
